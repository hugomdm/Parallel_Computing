
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "furvin"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "furvin-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('furvin')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("DaO_calloption")
> ### * DaO_calloption
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DaO_calloption
> ### Title: DaO-calloption: Down and Out Call Option
> ### Aliases: DaO_calloption
> 
> ### ** Examples
> 
> res <- DaO_calloption(100, 0.05, 0.005, 2, 0.2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DaO_calloption", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("forest_fire_apply")
> ### * forest_fire_apply
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: forest_fire_apply
> ### Title: forest_fire_apply: Simulate Forest Fire using apply technique
> ### Aliases: forest_fire_apply
> 
> ### ** Examples
> 
> set.seed(3)
> infection_matrix <- matrix(2, 21, 21)
> infection_matrix[11, 11] <- 1
> result = forest_fire_apply(infection_matrix, .2, .4, FALSE)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("forest_fire_apply", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("forest_fire_commented")
> ### * forest_fire_commented
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: forest_fire_commented
> ### Title: forest_fire_commented: Simulate Forest Fire with Organized Code
> ### Aliases: forest_fire_commented
> 
> ### ** Examples
> 
> set.seed(3)
> infection_matrix <- matrix(2, 21, 21)
> infection_matrix[11, 11] <- 1
> result = forest_fire_commented(infection_matrix, .2, .4, FALSE)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("forest_fire_commented", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("forest_fire_rcpp")
> ### * forest_fire_rcpp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: forest_fire_rcpp
> ### Title: Simulate Forest Fire using rcpp techniques
> ### Aliases: forest_fire_rcpp
> 
> ### ** Examples
> 
> set.seed(3)
> infection_matrix <- matrix(2, 21, 21)
> infection_matrix[11, 11] <- 1
> result = forest_fire_rcpp(infection_matrix, .2, .4, FALSE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("forest_fire_rcpp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("forest_fire_vectorized")
> ### * forest_fire_vectorized
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: forest_fire_vectorized
> ### Title: forest_file_vectorized.r: Simulate Forest Fire using vectorized
> ###   techniques
> ### Aliases: forest_fire_vectorized
> 
> ### ** Examples
> 
> set.seed(3)
> infection_matrix <- matrix(2, 21, 21)
> infection_matrix[11, 11] <- 1
> result = forest_fire_vectorized(infection_matrix, .2, .4, FALSE)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("forest_fire_vectorized", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("furvin-package")
> ### * furvin-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: furvin-package
> ### Title: A short title line describing what the package does
> ### Aliases: furvin-package furvin
> ### Keywords: package
> 
> ### ** Examples
> 
>   ## Not run: 
> ##D      ## Optional simple examples of the most important functions
> ##D      ## These can be in \dontrun{} and \donttest{} blocks.   
> ##D   
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("furvin-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gbm")
> ### * gbm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gbm
> ### Title: GBM: Geometric Brownian Motion
> ### Aliases: gbm
> 
> ### ** Examples
> 
> res <- gbm(100, 0.01, 0.0025, 1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gbm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.97 0.02 0.98 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
